Homework #3
Your name: Sami Lababidi


---------------------------------------- Question 1 Query ---------------------------------------- 

SELECT count(*) FROM film WHERE rental_rate = 4.99;

---------------------------------------- Question 1 Results ---------------------------------------- 					

 count 
-------
   336
(1 row)

---------------------------------------- Question 2 Query ---------------------------------------- 

SELECT last_name, first_name FROM customer WHERE active = 0 ORDER BY 1,2;

---------------------------------------- Question 2 Results ---------------------------------------- 					

 last_name | first_name 
-----------+------------
 ARCE      | HARRY
 COX       | JUDITH
 CRAWLEY   | MAURICE
 CULP      | THEODORE
 EASTER    | BEN
 EGGLESTON | JIMMIE
 GOODEN    | KENNETH
 JUNG      | CHRISTIAN
 LARSON    | HEIDI
 MARTIN    | SANDRA
 MATTHEWS  | ERICA
 NEAL      | PENNY
 ROUSH     | TERRANCE
 RUNYON    | NATHAN
 WELLS     | SHEILA
(15 rows)	

---------------------------------------- Question 3 Query ---------------------------------------- 

SELECT payment_id, amount, payment_date FROM payment ORDER BY 2 DESC LIMIT 10;

---------------------------------------- Question 3 Results ---------------------------------------- 					

 payment_id | amount |         payment_date          
------------+--------+-------------------------------
      24866 |  11.99 | 2017-03-02 20:46:39.996577-07
      28814 |  11.99 | 2017-04-06 21:26:57.996577-06
      23757 |  11.99 | 2017-03-21 22:02:26.996577-06
      24553 |  11.99 | 2017-03-23 20:47:59.996577-06
      17354 |  11.99 | 2017-02-17 22:19:47.996577-07
      28799 |  11.99 | 2017-04-07 19:14:17.996577-06
      20403 |  11.99 | 2017-03-21 21:57:24.996577-06
      22650 |  11.99 | 2017-03-22 22:17:22.996577-06
      17055 |  11.99 | 2017-01-25 16:46:45.996577-07
      29136 |  11.99 | 2017-04-29 21:06:07.996577-06
(10 rows)	

---------------------------------------- Question 4 Query ---------------------------------------- 

SELECT COUNT(f.*) FROM film f, language l WHERE f.language_id = l.language_id AND l.name = 'English';

SELECT COUNT(*) FROM film WHERE language_id IN (SELECT language_id FROM language WHERE name = 'English');

---------------------------------------- Question 4 Results ---------------------------------------- 					
 count 
-------
  1000
(1 row)

---------------------------------------- Question 5 Query ---------------------------------------- 

SELECT f.title from film f,
(SELECT film_id, COUNT(inventory_id) AS number_of_inventory FROM inventory GROUP BY film_id ORDER BY number_of_inventory DESC LIMIT 1) AS i
where i.film_id = f.film_id;

---------------------------------------- Question 5 Results ---------------------------------------- 					
     title     
---------------
 GARDEN ISLAND
(1 row)	

---------------------------------------- Question 6 Query ---------------------------------------- 

SELECT c.customer_id, SUM(p.amount) AS Total_Amount 
 	FROM customer c, payment p
 	WHERE c.customer_id = p.customer_id  AND c.customer_id > 500
 	GROUP BY c.customer_id;

---------------------------------------- Question 6 Results ---------------------------------------- 				
 customer_id | total_amount 
-------------+--------------
         574 |       109.72
         546 |       107.74
         562 |       109.75
         550 |       159.68
         559 |       110.72
         552 |        90.79
         539 |        90.78
         511 |        99.76
         571 |       121.76
         554 |       101.78
         516 |        98.74
         542 |        94.82
         514 |        74.78
         582 |       113.75
         537 |       103.75
         558 |       135.72
         540 |       112.76
         576 |       139.66
         598 |        83.78
         513 |       148.69
         526 |       221.55
         541 |       108.76
         596 |        96.72
         524 |        87.81
         509 |       100.80
         504 |       133.72
         581 |       107.73
         512 |       115.74
         560 |       132.70
         547 |        99.77
         594 |       130.73
         523 |        93.78
         518 |       111.74
         533 |       141.67
         589 |       129.72
         583 |       117.77
         556 |        83.79
         569 |       134.68
         529 |       118.71
         555 |        74.83
         522 |       167.67
         567 |        85.80
         577 |       118.72
         538 |       117.71
         505 |        97.79
         568 |        66.79
         575 |       126.71
         502 |       138.66
         595 |       117.70
         527 |        81.76
         590 |       112.75
         588 |       115.71
         544 |        98.78
         534 |        88.76
         561 |        96.73
         591 |       134.73
         586 |        64.81
         525 |        74.81
         507 |        95.75
         572 |       108.75
         587 |       108.74
         543 |        82.78
         565 |       126.71
         578 |        96.78
         597 |        99.75
         566 |       141.66
         551 |        96.74
         593 |       113.74
         532 |       152.68
         564 |        91.76
         503 |       115.68
         592 |       111.71
         535 |       135.68
         579 |       111.73
         573 |       120.71
         510 |       122.74
         548 |        79.81
         553 |       107.76
         519 |       103.77
         570 |        99.74
         521 |        80.77
         506 |       152.65
         508 |       127.75
         501 |        89.79
         580 |        99.73
         545 |        89.79
         530 |        76.77
         599 |        83.81
         536 |       117.75
         584 |       129.70
         549 |        77.80
         517 |       105.75
         528 |       111.75
         520 |       134.68
         563 |       110.71
         557 |        73.76
         515 |       126.72
         531 |       118.75
         585 |       117.76
(99 rows)

---------------------------------------- Question 7 Query ---------------------------------------- 

SELECT c.name, SUM(p.amount) AS Total_Amount
 	FROM category c, payment p, inventory i, rental r, film_category f
 	WHERE p.rental_id = r.rental_id
	AND r.inventory_id = i.inventory_id
	AND i.film_id = f.film_id
	AND f.category_id = c.category_id
 	GROUP BY c.name;

---------------------------------------- Question 7 Results ---------------------------------------- 					
    name     | total_amount 
-------------+--------------
 Sports      |      5314.21
 Classics    |      3639.59
 New         |      4361.57
 Family      |      4226.07
 Comedy      |      4383.58
 Animation   |      4656.30
 Travel      |      3549.64
 Music       |      3417.72
 Drama       |      4587.39
 Horror      |      3722.54
 Sci-Fi      |      4756.98
 Games       |      4281.33
 Documentary |      4217.52
 Foreign     |      4270.67
 Action      |      4375.85
 Children    |      3655.55
(16 rows)	

---------------------------------------- Question 8 Query ---------------------------------------- 

SELECT COUNT(r.*) from rental r, customer c 
	WHERE c.customer_id = r.customer_id 
	AND c.first_name = 'JOHN' 
	AND c.last_name = 'FARNSWORTH';

---------------------------------------- Question 8 Results ---------------------------------------- 					
 count 
-------
    31
(1 row)	

---------------------------------------- Question 9 Query ---------------------------------------- 

SELECT COUNT(r.*) 
	FROM rental r, payment p 
	WHERE p.rental_id = r.rental_id 
	AND p.payment_date < '2017-01-27';

---------------------------------------- Question 9 Results ---------------------------------------- 					
 count 
-------
   328
(1 row)	

---------------------------------------- Question 10 Query ---------------------------------------- 

CREATE TABLE IF NOT EXISTS short_films (
	film_id INT NOT NULL,
	title VARCHAR(40) NOT NULL,
	length INT NOT NULL,
	replacement_cost DECIMAL(9,2) NOT NULL,
	rating VARCHAR(5),
	PRIMARY KEY(film_id)
);
	
---------------------------------------- Question 11 Query ---------------------------------------- 

INSERT INTO short_films (
	SELECT film_id, title, length, replacement_cost, rating
		FROM film
		WHERE length < 50
);

---------------------------------------- Question 12 Query ---------------------------------------- 

DELETE FROM short_films
	WHERE replacement_cost > 19.99;

---------------------------------------- Question 13 Query ---------------------------------------- 

ALTER TABLE short_films ADD stars INT DEFAULT 5;

---------------------------------------- Question 14 Query ---------------------------------------- 

UPDATE short_films SET length_sec = length_min * 60;

---------------------------------------- Question 15 Query ---------------------------------------- 

DROP TABLE short_films;

